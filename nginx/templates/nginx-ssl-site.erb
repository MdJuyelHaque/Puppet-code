server {
    listen <%= @port %> ssl http2 <% if @isDefaultServer %>default_server backlog=4096<% end %>;
    listen [::]:<%= @port %> ssl http2 <% if @isDefaultServer %>default_server ipv6only=on backlog=4096<% end %>;

    # SSL configuration
	ssl    on;
	ssl_certificate    	<%= @nginxSslDir %>/<%= @sslConfigPrefix %>.crt;
	ssl_certificate_key <%= @nginxSslDir %>/<%= @sslConfigPrefix %>.key;

	# Logging
    access_log <%= @logsRoot %>/<%= @site %>-https-access.log enhanced buffer=128k flush=30s;
    error_log <%= @logsRoot %>/<%= @site %>-https-error.log;

	# SSL caching/optimization
    ssl_protocols        SSLv3 TLSv1 TLSv1.1 TLSv1.2;
	ssl_ciphers "EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA RC4 !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS +RC4 RC4";
    ssl_prefer_server_ciphers on;
    keepalive_timeout    60;
    ssl_session_cache    shared:SSL:15m;
    ssl_session_timeout  15m;

    root <%= @defaultDocroot %>;
    server_name <%= @proxyHost %>;

    index index.html;
    recursive_error_pages   on;

    # Make site accessible from the proxyHost address
    proxy_set_header  Host       $host;
    proxy_set_header  X-Scheme  '<%= @scheme %>';
    proxy_set_header  X-Real-IP  $remote_addr;
    proxy_set_header  X-Proxy-Host "<%= @proxyHost %>";
    proxy_set_header  X-Proxy-Port <%= @httpsProxyPort %>;
    proxy_set_header  X-Original-Request $request_uri;
    proxy_redirect off;
    proxy_read_timeout 180s;

    <% @includeFilePaths.each do |includeFilePath| %>
        include <%= includeFilePath %>;
    <% end %>

    <% if @awsDnsResolution %>
        # Use AWS DNS server in VPC
        resolver         10.<%= @vpcClassB %>.0.2 valid=300s;
        resolver_timeout 10s;
    <% end %>

    # Block these paths from access
    <% @blockPathsRegex.each do |blockPathRegex| %>
    location ~* <%= blockPathRegex %> {
        return 404;
    }
    <% end %>

    #
    # Static paths for static content served from filesystem
    #
    <% @staticPaths.each do |pathDef| %>
    location <%= pathDef['sourcePath'] %> {
        <%- if pathDef['autoindex'] -%>
        autoindex on;
        # First attempt to serve request as file, then
        # as directory, then as index page, then
        # fall back to displaying a 404.
        try_files $uri $uri/ <%= pathDef['sourcePath'] %>/index.html =404;
        <%- else -%>
        # First attempt to serve request as file, then
        # as directory, then fall back to displaying a 404.
        try_files $uri $uri/ =404;
        <%- end -%>
        expires 1h;
        add_header Pragma public;
        add_header Cache-Control "public, must-revalidate, proxy-revalidate";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";
        add_header X-XSS-Protection "1; mode=block";
        add_header X-Content-Type-Options "nosniff";
        add_header Content-Security-Policy "frame-ancestors 'none'";
    }
    <% end %>

    #
    # Pass through proxied paths
    #
    <% @proxyPaths.each do |proxyPath| %>
    location <%= proxyPath['sourcePath'] %> {
        proxy_pass <%= proxyPath['proxyTarget'] %>$request_uri;
        proxy_cache_bypass 1;
        proxy_no_cache 1;
        proxy_intercept_errors off;
        #expires -1;
        #add_header Pragma "no-cache";
    }
    <% end %>

    #
    # Service paths served by the app
    #
    <% @appServerPaths.each do |pathDef| %>
    location <%= pathDef['sourcePath'] %> {
        <%- if pathDef.has_key?('auth') -%>
            auth_basic "<%= pathDef['auth']['authChallenge'] %>";
            auth_basic_user_file <%= pathDef['auth']['passwordFile'] %>;
        <%- end -%>

        <%- if pathDef.has_key?('redirects') -%>
            <%- pathDef['redirects'].each do |redirect| -%>
            rewrite <%= redirect['match'] %> <%= redirect['redirect'] %> <%= redirect['type'] %>;
            <%- end -%>
        <%- end -%>

        proxy_pass    http://<%= @appServerHost %>:<%= @appServerHttpsPort %><%= pathDef['destinationPath'] %>$request_uri;
        proxy_cache_bypass 1;
        proxy_no_cache 1;
        proxy_intercept_errors on;
        expires -1;
        add_header Pragma "no-cache";
    }
    <% end %>

    #
    # HTTPS only paths
    #
    <% @httpsProtectedPaths.each do |path| %>
    location = <%= path %> {
        proxy_pass    http://<%= @appServerHost %>:<%= @appServerHttpsPort %>$request_uri;
        proxy_cache_bypass 1;
        proxy_no_cache 1;
        proxy_intercept_errors on;
        expires -1;
        add_header Pragma "no-cache";
    }
    <% end %>

    <% @httpsProtectedPathsRegex.each do |path| %>
    location ~ <%= path %> {
        proxy_pass    http://<%= @appServerHost %>:<%= @appServerHttpsPort %>$request_uri;
        proxy_cache_bypass 1;
        proxy_no_cache 1;
        expires -1;
        proxy_intercept_errors on;
        add_header Pragma "no-cache";
    }
    <% end %>

    location = /client-error.html {
        root <%= @errorPagesDocroot %>;
    }

    location = /server-error.html {
        root <%= @errorPagesDocroot %>;
    }

}

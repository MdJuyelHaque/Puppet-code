#!/bin/bash
### BEGIN INIT INFO
# Provides:          tomcat
# Required-Start:    $network $remote_fs $local_fs
# Required-Stop:     $network $remote_fs $local_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Stop/start Apache Tomcat
### END INIT INFO
#
# description: Apache Tomcat init script
# processname: tomcat  
# chkconfig: 234 20 80  
#
#
# Copyright (C) 2014 Miglen Evlogiev
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of  MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Initially forked from: gist.github.com/valotas/1000094
# Source: gist.github.com/miglen/5590986

 
#Location of JAVA_HOME (bin files)
export JAVA_HOME=/usr/lib/jvm/java-11-oracle
 
#Add Java binary files to PATH
export PATH=$JAVA_HOME/bin:$PATH
 
#CATALINA_HOME is the location of the bin files of Tomcat  
export CATALINA_HOME=<%= @tomcatHome %>
 
#CATALINA_BASE is the location of the configuration files of this instance of Tomcat
export CATALINA_BASE=<%= @tomcatHome %>
 
#TOMCAT_USER is the default user of tomcat
export TOMCAT_USER=<%= @tomcatUser %>

# Java options
JMX_PORT=<%= @jmxPort %>
PROFILING_OPTS="-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=$JMX_PORT -Dcom.sun.management.jmxremote.rmi.port=$JMX_PORT -Djava.rmi.server.hostname=127.0.0.1 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false"
TOMCAT_IDENTIFIER="tomcatServer=<%= @httpPort %>"
export JAVA_OPTS="-D$TOMCAT_IDENTIFIER $PROFILING_OPTS -server -Djava.awt.headless=true  -Xms<%= @jvmMaxSize %> -Xmx<%= @jvmMaxSize %> -XX:MaxMetaspaceSize=<%= @maxMetaspace %> -XX:+UseG1GC -XX:MaxGCPauseMillis=350 -javaagent:<%= scope['jolokia::jolokiaAgentLocation'] %>=config=<%= @tomcatJolokiaAgentConf %> --add-modules java.se --add-exports java.base/jdk.internal.ref=ALL-UNNAMED --add-opens java.base/java.lang=ALL-UNNAMED --add-opens java.base/java.nio=ALL-UNNAMED --add-opens java.base/sun.nio.ch=ALL-UNNAMED --add-opens java.management/sun.management=ALL-UNNAMED --add-opens jdk.management/com.sun.management.internal=ALL-UNNAMED"
export JPDA_OPTS="-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:<%= @debugPort %>"
 
#TOMCAT_USAGE is the message if this script is called without any options
TOMCAT_USAGE="Usage: $0 {\e[00;32mstart\e[00m|\e[00;32mstart-debug\e[00m|\e[00;31mstop\e[00m|\e[00;31mkill\e[00m|\e[00;32mstatus\e[00m|\e[00;31mrestart\e[00m}"
 
#SHUTDOWN_WAIT is wait time in seconds for java proccess to stop
SHUTDOWN_WAIT=20

tomcat_pid() {
  echo `ps -elf | grep "$TOMCAT_IDENTIFIER" | grep -v grep | awk '{print $4}'`
}

tomcat_running() {
  echo `ps -elf | grep "$TOMCAT_IDENTIFIER" | grep -v grep | awk '{print $4}' | wc -l`
}
 
start() {
  pid=$(tomcat_pid)
  if [ -n "$pid" ]
  then
    echo -e "\e[00;31mTomcat is already running (pid: $pid)\e[00m"
  else
    echo -e "\e[00;32mStarting tomcat\e[00m"

    if [ `user_exists $TOMCAT_USER` = "1" ]
    then
            # Start tomcat
            /sbin/runuser -s /bin/bash -l $TOMCAT_USER -c "export JAVA_OPTS='$JAVA_OPTS'; export JPDA_ADDRESS=*:<%= @debugPort %>; $CATALINA_HOME/bin/catalina.sh $1 start"
    else
            echo -e "\e[00;31mTomcat user $TOMCAT_USER does not exist"
            exit 101
    fi
    status
  fi
  return 0
}

start-debug() {
  start jpda
}
 
status(){
          pid=$(tomcat_pid)
          if [ -n "$pid" ]
            then echo -e "\e[00;32mTomcat is running with pid: $pid\e[00m"
          else
            echo -e "\e[00;31mTomcat is not running\e[00m"
            return 3
          fi
}

terminate() {
	echo -e "\e[00;31mTerminating Tomcat\e[00m"
	kill -9 $(tomcat_pid)
}

stop() {
  pid=$(tomcat_pid)
  if [ -n "$pid" ]
  then
    echo -e "\e[00;31mStoping Tomcat\e[00m"
    #/bin/su -p -s /bin/sh $TOMCAT_USER
    #sh $CATALINA_HOME/bin/shutdown.sh
    kill $(tomcat_pid)
 
    let kwait=$SHUTDOWN_WAIT
    count=0;
    until [ `ps -p $pid | grep -c $pid` = '0' ] || [ $count -gt $kwait ]
    do
      echo -n -e "\n\e[00;31mwaiting for processes to exit\e[00m";
      sleep 1
      let count=$count+1;
    done
 
    if [ $count -gt $kwait ]; then
      echo -n -e "\n\e[00;31mkilling processes didn't stop after $SHUTDOWN_WAIT seconds\e[00m"
      terminate
    fi
  else
    echo -e "\e[00;31mTomcat is not running\e[00m"
  fi
 
  return 0
}
 
user_exists(){
        if id -u $1 >/dev/null 2>&1; then
        echo "1"
        else
                echo "0"
        fi
}
 
case $1 in
	start)
	  start
	;;
  start-debug)
    start-debug
  ;;
	stop)  
	  stop
	;;
	restart)
	  stop
	  start
	;;
	status)
		status
		exit $?  
	;;
	kill)
		terminate
	;;		
	*)
		echo -e $TOMCAT_USAGE
	;;
esac    
exit 0
